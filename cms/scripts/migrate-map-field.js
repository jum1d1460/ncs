/**
 * Script de migraci√≥n para actualizar el campo del mapa en blockContact
 * Migra de map.embedUrl a map.mapUrl
 * 
 * Este script es necesario si ya tienes bloques de contacto con mapas en Sanity
 * usando el campo antiguo embedUrl.
 * 
 * Uso:
 * node cms/scripts/migrate-map-field.js
 */

import { createClient } from '@sanity/client';

// Configurar cliente de Sanity (usa las variables de entorno o reemplaza con tus valores)
const client = createClient({
  projectId: process.env.SANITY_PROJECT_ID || 'tu-project-id',
  dataset: process.env.SANITY_DATASET || 'production',
  token: process.env.SANITY_TOKEN, // Necesitas un token con permisos de escritura
  useCdn: false,
  apiVersion: '2024-01-01'
});

async function migrateMapFields() {
  console.log('üîç Buscando p√°ginas con bloques de contacto...');
  
  try {
    // Buscar todas las p√°ginas que tengan bloques de contacto con el campo antiguo
    const pages = await client.fetch(`
      *[_type == "page"] {
        _id,
        _rev,
        title,
        "contactBlocks": blocks[_type == "blockContact" && defined(map.embedUrl)] {
          _key,
          map
        }
      }[count(contactBlocks) > 0]
    `);

    console.log(`üì¶ Encontradas ${pages.length} p√°ginas con bloques de contacto que necesitan migraci√≥n`);

    if (pages.length === 0) {
      console.log('‚úÖ No hay bloques que migrar. Todos los datos est√°n actualizados.');
      return;
    }

    // Procesar cada p√°gina
    let migratedCount = 0;
    for (const page of pages) {
      console.log(`\nüìÑ Procesando p√°gina: ${page.title} (${page._id})`);
      
      for (const block of page.contactBlocks) {
        if (block.map?.embedUrl) {
          console.log(`  üîÑ Migrando bloque con _key: ${block._key}`);
          
          // Actualizar el bloque usando el patch
          await client
            .patch(page._id)
            .set({
              [`blocks[_key=="${block._key}"].map.mapUrl`]: block.map.embedUrl
            })
            .unset([`blocks[_key=="${block._key}"].map.embedUrl`])
            .commit();
          
          migratedCount++;
          console.log(`  ‚úÖ Bloque migrado exitosamente`);
        }
      }
    }

    console.log(`\nüéâ Migraci√≥n completada exitosamente!`);
    console.log(`üìä Total de bloques migrados: ${migratedCount}`);
    
  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
    process.exit(1);
  }
}

// Funci√≥n para verificar el estado antes de migrar
async function checkMigrationStatus() {
  console.log('üìä Verificando estado actual...\n');
  
  try {
    const stats = await client.fetch(`
      {
        "totalPages": count(*[_type == "page"]),
        "pagesWithContact": count(*[_type == "page" && count(blocks[_type == "blockContact"]) > 0]),
        "pagesWithOldField": count(*[_type == "page" && count(blocks[_type == "blockContact" && defined(map.embedUrl)]) > 0]),
        "pagesWithNewField": count(*[_type == "page" && count(blocks[_type == "blockContact" && defined(map.mapUrl)]) > 0])
      }
    `);

    console.log(`Total de p√°ginas: ${stats.totalPages}`);
    console.log(`P√°ginas con bloques de contacto: ${stats.pagesWithContact}`);
    console.log(`P√°ginas con campo antiguo (embedUrl): ${stats.pagesWithOldField}`);
    console.log(`P√°ginas con campo nuevo (mapUrl): ${stats.pagesWithNewField}`);
    console.log('');

    return stats;
  } catch (error) {
    console.error('‚ùå Error al verificar estado:', error);
    process.exit(1);
  }
}

// Ejecutar el script
async function main() {
  console.log('üöÄ Script de migraci√≥n de campos de mapa\n');
  
  // Verificar configuraci√≥n
  if (!process.env.SANITY_TOKEN) {
    console.error('‚ùå Error: SANITY_TOKEN no est√° configurado');
    console.error('üí° Necesitas un token de Sanity con permisos de escritura');
    console.error('   Config√∫ralo en las variables de entorno o en el archivo .env');
    process.exit(1);
  }

  // Verificar estado actual
  await checkMigrationStatus();

  // Preguntar confirmaci√≥n (en un entorno de producci√≥n real, usa readline o similar)
  console.log('‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n modificar√° tus datos en Sanity');
  console.log('üí° Aseg√∫rate de tener un backup antes de continuar');
  console.log('');
  
  // Para automatizaci√≥n, puedes comentar esto y ejecutar directamente
  if (process.argv.includes('--dry-run')) {
    console.log('üîç Modo dry-run: No se realizar√°n cambios');
    return;
  }

  // Ejecutar migraci√≥n
  await migrateMapFields();

  // Verificar estado despu√©s de la migraci√≥n
  console.log('\nüìä Verificando estado despu√©s de la migraci√≥n...\n');
  await checkMigrationStatus();
}

// Manejar errores no capturados
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Error no manejado:', error);
  process.exit(1);
});

main();

