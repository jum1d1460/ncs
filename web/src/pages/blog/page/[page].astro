---
import Layout from '../../../layouts/Layout.astro';
import { sanityClient, fetchGlobalSettings } from "../../../lib/sanityClient";
import ResponsiveImage from '../../../components/ResponsiveImage.astro';
import Pagination from '../../../components/Pagination.astro';

export async function getStaticPaths() {
    // Configuración de paginación
    const POSTS_PER_PAGE = 9; // 3x3 grid
    try {
        // Obtener el total de posts para calcular las páginas
        const totalPosts = await sanityClient.fetch(`count(*[_type == "post"])`) as number;
        const totalPages = Math.ceil(totalPosts / POSTS_PER_PAGE);
        
        const paths = [];
        
        // Generar rutas para cada página (empezando desde la página 2)
        for (let page = 2; page <= totalPages; page++) {
            const start = (page - 1) * POSTS_PER_PAGE;
            const end = start + POSTS_PER_PAGE;
            
            const posts = await sanityClient.fetch(`
                *[_type == "post"] | order(publishedAt desc, _createdAt desc) [${start}...${end}] {
                    _id,
                    title,
                    slug,
                    mainImage{..., asset->{_ref, url}},
                    publishedAt,
                    categories[]->{
                        title,
                        description
                    },
                    author->{
                        name,
                        image{..., asset->{_ref, url}}
                    },
                    "excerpt": array::join(string::split((pt::text(blocks[0..2])), "")[0..200], "") + "..."
                }
            `);

            paths.push({
                params: { page: page.toString() },
                props: { 
                    posts,
                    currentPage: page,
                    totalPages,
                    totalPosts
                }
            });
        }

        return paths;
    } catch (err) {
        console.error('[Blog Page] Error in getStaticPaths:', err);
        return [];
    }
}

interface BlogPost {
    _id: string;
    title: string;
    slug: { current: string };
    mainImage: any;
    publishedAt: string;
    categories: Array<{
        title: string;
        description: string;
    }>;
    author: {
        name: string;
        image: any;
    };
    excerpt: string;
}

const { posts = [], currentPage = 1, totalPages = 1, totalPosts = 0 } = Astro.props as { 
    posts: BlogPost[], 
    currentPage: number, 
    totalPages: number, 
    totalPosts: number 
};
const settings = await fetchGlobalSettings();

// Obtener configuración del blog desde globalSettings
const blogConfig = settings?.blogPage;

// Función para generar estilos del hero
const getHeroStyles = () => {
    if (blogConfig?.heroBackgroundImage) {
        return 'min-height: 60vh;';
    }
    return 'background: linear-gradient(135deg, #1e3a8a, #1e40af); min-height: 60vh;';
};

// Función para generar estilos del overlay
const getOverlayStyles = () => {
    if (!blogConfig?.heroOverlaySettings) {
        return 'background: linear-gradient(135deg, rgba(30, 58, 138, 0.7), rgba(0, 0, 0, 0.5));';
    }

    const { overlayType, overlayColor, overlayOpacity, secondaryColor, secondaryOpacity, gradientDirection } = blogConfig.heroOverlaySettings;

    if (overlayType === 'none') {
        return '';
    }

    if (overlayType === 'solid') {
        return `background: rgba(${overlayColor}, ${overlayOpacity || 0.8});`;
    }

    if (overlayType === 'linear') {
        return `background: linear-gradient(${gradientDirection || 'to bottom'}, rgba(${overlayColor}, ${overlayOpacity || 0.8}), rgba(${secondaryColor}, ${secondaryOpacity || 0.6}));`;
    }

    if (overlayType === 'radial') {
        return `background: radial-gradient(circle at center, rgba(${overlayColor}, ${overlayOpacity || 0.8}), rgba(${secondaryColor}, ${secondaryOpacity || 0.6}));`;
    }

    return 'background: linear-gradient(135deg, rgba(30, 58, 138, 0.7), rgba(0, 0, 0, 0.5));';
};

// Importar función de formato de fechas
import { formatDateSpanish } from '../../../lib/dateUtils';

// Usar la función utilitaria para formatear fechas
const formatDate = formatDateSpanish;
---

<Layout 
  title={`Blog - Página ${currentPage}`}
  globalSettings={settings}
>
    <main class="min-h-screen bg-gray-50">
        <!-- Hero del blog desde Sanity -->
        <section class="relative overflow-hidden text-white py-20" style={getHeroStyles()}>
            <!-- Imagen de fondo si está configurada -->
            {blogConfig?.heroBackgroundImage && (
                <div class="absolute inset-0 z-0">
                    <img 
                        src={blogConfig.heroBackgroundImage.asset?.url} 
                        alt="Fondo del blog"
                        class="w-full h-full object-cover"
                    />
                </div>
            )}
            
            <!-- Overlay configurable -->
            <div class="absolute inset-0 z-10" style={getOverlayStyles()}></div>
            
            <!-- Contenido -->
            <div class="relative z-20 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
                <h1 class="text-4xl md:text-5xl font-bold mb-4">
                    {blogConfig?.heroTitle || 'Blog'}
                </h1>
                <p class="text-xl text-blue-200 max-w-2xl mx-auto">
                    {blogConfig?.heroSubtitle || 'Descubre artículos, noticias y contenido relevante sobre nuestros servicios y la industria'}
                </p>
            </div>
        </section>

        <!-- Lista de posts -->
        <section class="py-16">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                {posts.length > 0 ? (
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {posts.map((post) => (
                            <article class="relative rounded-lg shadow-lg border border-gray-200 overflow-hidden hover:shadow-2xl transition-all duration-300 group">
                                <!-- Imagen de fondo que cubre toda la card -->
                                {post.mainImage && (
                                    <div class="absolute inset-0">
                                        <ResponsiveImage
                                            image={post.mainImage}
                                            alt={post.title}
                                            class="w-full h-full object-cover"
                                            aspectRatio="16:9"
                                        />
                                    </div>
                                )}
                                
                                <!-- Tags en la esquina superior derecha -->
                                {post.categories && post.categories.length > 0 && (
                                    <div class="absolute top-4 right-4 z-10">
                                        <div class="flex flex-wrap gap-1 justify-end">
                                            {post.categories.map((category) => (
                                                <span class="inline-block bg-brand-forest-500/80 backdrop-blur-sm text-white text-xs font-medium px-2 py-1 rounded-md shadow-sm">
                                                    {category.title}
                                                </span>
                                            ))}
                                        </div>
                                    </div>
                                )}
                                
                                <!-- Overlay degradado para mejorar legibilidad -->
                                <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
                                
                                <!-- Contenido superpuesto -->
                                <div class="relative z-10 h-full flex flex-col justify-end min-h-[400px]">
                                    <!-- Título con fondo color1 semitransparente integrado -->
                                    <h2 class="text-xl font-semibold text-white line-clamp-2">
                                        <a href={`/blog/${post.slug.current}`} class="block bg-brand-forest-500/80 backdrop-blur-sm px-6 py-4 rounded-b-lg hover:bg-brand-forest-500/90 transition-all duration-300 group-hover:shadow-md border-t border-brand-forest-500/50">
                                            <!-- Fecha alineada a la izquierda dentro de la caja -->
                                            <div class="flex justify-start">
                                                <time datetime={post.publishedAt} class="text-white/90 text-sm font-medium">
                                                    {formatDate(post.publishedAt)}
                                                </time>
                                            </div>
                                            {post.title}
                                        </a>
                                    </h2>
                                </div>
                            </article>
                        ))}
                    </div>
                ) : (
                    <div class="text-center py-12">
                        <h2 class="text-2xl font-semibold text-gray-900 mb-4">No hay posts disponibles</h2>
                        <p class="text-gray-600">Vuelve pronto para ver nuevos artículos.</p>
                    </div>
                )}

                <!-- Paginación -->
                {totalPages > 1 && (
                    <Pagination 
                        currentPage={currentPage}
                        totalPages={totalPages}
                        baseUrl="/blog"
                    />
                )}
            </div>
        </section>
    </main>
</Layout>

<style>
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>
