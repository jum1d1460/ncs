---
import ResponsiveImage from '../ResponsiveImage.astro';
import { portableTextToHtml } from '../../lib/portableText';

interface ButtonProps {
  text: string;
  linkType?: 'external' | 'internal';
  url?: string;
  internalPage?: {
    slug: { current: string };
  };
  variant: 'primary' | 'secondary' | 'outline';
}

interface SimpleHeroProps {
  title: string;
  subtitle?: string;
  description?: any;
  cta?: ButtonProps;
  backgroundImage: any;
}

const { 
  title,
  subtitle,
  description,
  cta,
  backgroundImage
} = Astro.props;

// Debug: verificar que el Hero se está renderizando (comentado para producción)
// console.log('Hero component rendered with:', { 
//   title, 
//   subtitle, 
//   backgroundImage: !!backgroundImage, 
//   cta: !!cta,
//   description: !!description 
// });
// console.log('Hero props:', Astro.props);

// Función para obtener la URL del botón
const getButtonUrl = (button: ButtonProps) => {
  if (button.linkType === 'internal' && button.internalPage?.slug) {
    return `/${button.internalPage.slug.current}`;
  }
  return button.url || '#';
};
---

<!-- Hero Section simplificado -->
<section class="hero-section-fullwidth relative overflow-hidden">
  <!-- Fondo de imagen -->
  {backgroundImage && (
    <div class="hero-background will-change-transform">
      <ResponsiveImage
        image={backgroundImage}
        alt="Fondo del Hero"
        title="Fondo"
        class="hero-background-image"
        aspectRatio="auto"
        sizes="100vw"
      />
    </div>
  )}
  
  <!-- Overlay sutil -->
  <div class="hero-overlay" style="background: linear-gradient(135deg, rgba(30, 58, 138, 0.7), rgba(0, 0, 0, 0.5));"></div>
  
  <!-- Contenido principal -->
  <div class="hero-content absolute inset-0 z-20 flex items-center justify-center">
    <div class="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-center py-16">
        <div class="text-white text-center space-y-6 max-w-4xl">
          <!-- Subtítulo (opcional) -->
          {subtitle && (
            <p class="hero-main-title animate-fade-in-up text-blue-200">
              {subtitle}
            </p>
          )}
          
          <!-- Título principal -->
          <h1 class="hero-subtitle animate-fade-in-up text-shadow-medium" style="animation-delay: 0.2s;">
            {title}
          </h1>
          
          <!-- Descripción (opcional) -->
          {description && (
            <div 
              class="hero-description text-responsive-body-large animate-fade-in-up text-gray-200" 
              style="animation-delay: 0.4s;"
              set:html={portableTextToHtml(description)}
            ></div>
          )}
          
          <!-- CTA (opcional) -->
          {cta && (
            <div class="hero-buttons animate-fade-in-up" style="animation-delay: 0.6s;">
              <sl-button 
                href={getButtonUrl(cta)}
                variant={cta.variant === 'primary' ? 'primary' : cta.variant === 'outline' ? 'outline' : 'neutral'}
                size="large"
                class="min-w-[180px]"
              >
                {cta.text}
              </sl-button>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Animaciones */
  .animate-fade-in-up {
    animation: fadeInUp 0.8s ease-out forwards;
    opacity: 0;
    transform: translateY(30px);
  }
  
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Estilos del fondo */
  .simple-hero-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }
  
  .simple-hero-background-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
  
  /* Overlay sutil */
  .simple-hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(30, 58, 138, 0.7), rgba(0, 0, 0, 0.5));
    z-index: 5;
  }
  
  /* Contenido */
  .simple-hero-content {
    z-index: 20;
    position: relative;
  }
  
  /* Tipografía */
  .simple-hero-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 700;
    line-height: 1.1;
    margin: 0;
  }
  
  .simple-hero-subtitle {
    font-size: clamp(1.125rem, 2.5vw, 1.5rem);
    font-weight: 500;
    line-height: 1.3;
    margin: 0;
  }
  
  .simple-hero-description {
    font-size: clamp(1rem, 2vw, 1.25rem);
    line-height: 1.6;
    margin: 0;
  }
  
  /* Responsive */
  @media (max-width: 640px) {
    .simple-hero-section {
      min-height: 50vh;
    }
    
    .simple-hero-title {
      font-size: 2rem !important;
      line-height: 1.2 !important;
    }
    
    .simple-hero-subtitle {
      font-size: 1rem !important;
    }
    
    .simple-hero-description {
      font-size: 0.9rem !important;
    }
    
    .simple-hero-cta sl-button {
      width: 100% !important;
    }
  }
  
  @media (min-width: 641px) and (max-width: 1023px) {
    .simple-hero-section {
      min-height: 55vh;
    }
  }
  
  @media (min-width: 1024px) {
    .simple-hero-section {
      min-height: 60vh;
    }
  }
  
  /* Estilos para contenido enriquecido */
  .simple-hero-description p:last-child {
    margin-bottom: 0;
  }
  
  .simple-hero-description h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    margin-top: 0;
  }
  
  .simple-hero-description h4 {
    font-size: 1.125rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
    margin-top: 0;
  }
  
  .simple-hero-description code {
    background-color: rgba(255, 255, 255, 0.1);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-family: 'Courier New', monospace;
    font-size: 0.875em;
  }
</style>

<script>
  if (typeof window !== 'undefined') {
    const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const section = (document.currentScript && typeof (document.currentScript as any).closest === 'function'
      ? (document.currentScript as any).closest('section')
      : document.querySelector('.simple-hero-section'));
    const bg = section ? section.querySelector('.simple-hero-background') : null;
    
    if (section && !reduceMotion) {
      let frame = 0;
      const onScroll = () => {
        if (frame) return;
        frame = requestAnimationFrame(() => {
          frame = 0;
          const top = (section as HTMLElement).offsetTop;
          const height = (section as HTMLElement).offsetHeight || 1;
          const y = window.scrollY || window.pageYOffset;
          const raw = (y - top + window.innerHeight) / (height + window.innerHeight);
          const progress = Math.max(0, Math.min(1, raw));
          const bgY = (-3 + 6 * progress).toFixed(2);
          if (bg) (bg as HTMLElement).style.transform = `translateY(${bgY}vh)`;
        });
      };
      onScroll();
      window.addEventListener('scroll', onScroll, { passive: true });
      window.addEventListener('resize', onScroll);
    }
  }
</script>
