---
import ResponsiveImage from '../ResponsiveImage.astro';

interface ButtonProps {
  text: string;
  url: string;
  variant: 'primary' | 'secondary' | 'outline';
}

interface HeroProps {
  mainTitle: string;
  subtitle: string;
  description: string;
  primaryButton: ButtonProps;
  secondaryButton: ButtonProps;
  backgroundImage: any;
  silhouetteImage: any;
  silhouettePosition: 'right' | 'left' | 'center';
  overlayColor?: string;
  overlayOpacity?: number;
}

const { 
  mainTitle, 
  subtitle, 
  description, 
  primaryButton, 
  secondaryButton, 
  backgroundImage, 
  silhouetteImage, 
  silhouettePosition = 'right',
  overlayColor = 'rgba(30, 58, 138, 0.8)',
  overlayOpacity = 0.8
} = Astro.props;

// Función para obtener la clase de posición de la silueta
const getSilhouettePositionClass = (position: string) => {
  switch (position) {
    case 'left':
      return 'lg:order-first';
    case 'center':
      return 'lg:order-none';
    case 'right':
    default:
      return 'lg:order-last';
  }
};

// Función para obtener la variante del botón
const getButtonClass = (variant: string) => {
  switch (variant) {
    case 'primary':
      return 'btn-primary';
    case 'secondary':
      return 'btn-secondary';
    case 'outline':
      return 'btn-secondary';
    default:
      return 'btn-primary';
  }
};
---

<!-- Hero Section con altura completa y responsive -->
<section class="relative w-full h-screen overflow-hidden">
  <!-- Fondo de imagen -->
  {backgroundImage && (
    <div class="absolute inset-0 w-full h-full flex items-center justify-center" id="hero-background">
      <ResponsiveImage
        image={backgroundImage}
        alt="Fondo del Hero"
        title="Fondo"
        class="hero-bg-image w-full h-full object-contain"
        aspectRatio="auto"
        sizes="100vw"
      />
    </div>
  )}
  
  <!-- Silueta de fondo (solo en desktop) -->
  {silhouetteImage && (
    <div class="hidden lg:block absolute inset-0 w-full h-full pointer-events-none z-20 overflow-hidden">
      <div class={`absolute top-0 w-1/2 ${silhouettePosition === 'left' ? 'left-0' : 'right-0'} flex items-start justify-center`}>
        <div class="relative w-full flex items-start justify-center transform scale-125 origin-top">
          <ResponsiveImage
            image={silhouetteImage}
            alt="Silueta del Hero"
            title="Silueta"
            class="w-full h-auto object-contain"
            aspectRatio="auto"
          />
        </div>
      </div>
    </div>
  )}
  
  <!-- Overlay -->
  <div 
    class="absolute inset-0 w-full h-full"
    style={`background: radial-gradient(ellipse at 85% 50%, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.75));`}
  ></div>
  
  <!-- Contenido principal -->
  <div class="relative z-30 w-full h-full flex items-center">
    <div class="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-16 items-center h-full">
        
        <!-- Columna de texto (ocupa 2 columnas en desktop) -->
        <div class="text-white space-y-4 sm:space-y-6 z-40 text-center lg:text-left lg:col-span-2">
          <p class="hero-main-title animate-fade-in-up normal-case">{mainTitle}</p>
          <h1 class="hero-subtitle animate-fade-in-up" style="animation-delay: 0.2s;">{subtitle}</h1>
          <p class="hero-description animate-fade-in-up text-shadow-sm" style="animation-delay: 0.4s;">{description}</p>
          
          <div class="hero-buttons animate-fade-in-up justify-center lg:justify-start" style="animation-delay: 0.6s;">
            {primaryButton && (
              <a 
                href={primaryButton.url} 
                class={getButtonClass(primaryButton.variant)}
              >
                {primaryButton.text}
              </a>
            )}
            
            {secondaryButton && (
              <a 
                href={secondaryButton.url} 
                class={getButtonClass(secondaryButton.variant)}
              >
                {secondaryButton.text}
              </a>
            )}
          </div>
        </div>
        
        <!-- Tercera columna vacía para mantener el balance visual -->
        <div class="hidden lg:block"></div>
        
      </div>
    </div>
  </div>
</section>

<style>
  /* Asegurar altura completa */
  section {
    min-height: 100vh;
  }
  
  /* Animaciones de entrada */
  .animate-fade-in-up {
    animation: fadeInUp 0.8s ease-out forwards;
    opacity: 0;
    transform: translateY(30px);
  }
  
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Responsive mejorado para móviles */
  @media (max-width: 640px) {
    .hero-main-title {
      font-size: 1.25rem !important;
      line-height: 1.3 !important;
      font-weight: 400 !important;
    }
    
    .hero-subtitle {
      font-size: 2rem !important;
      line-height: 1.1 !important;
    }
    
    .hero-description {
      font-size: 1rem !important;
      line-height: 1.5 !important;
    }
    
    .hero-buttons {
      flex-direction: column !important;
      gap: 1rem !important;
    }
    
    .hero-buttons a {
      width: 100% !important;
      text-align: center !important;
    }
  }
  
  /* Asegurar que la silueta de fondo ocupe todo el espacio en desktop */
  @media (min-width: 1024px) {
    .hero-silhouette {
      height: 100vh !important;
      width: 50% !important;
    }
  }

  /* Hero background: siempre ocupa el alto del viewport */
  #hero-background {
    height: 100vh !important;
    width: 100vw !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }
  
  #hero-background img {
    height: 100vh !important;
    width: auto !important;
    max-width: none !important;
    object-fit: contain !important;
    object-position: center !important;
  }
  
  /* CSS más específico para sobrescribir Tailwind */
  #hero-background img.hero-bg-image,
  #hero-background img[data-hero-image="true"] {
    height: 100vh !important;
    width: 100vw !important;
    object-fit: cover !important;
    object-position: center !important;
  }
  
  /* Responsive para diferentes orientaciones */
  @media (orientation: landscape) {
    #hero-background img {
      height: 100vh !important;
      width: auto !important;
    }
  }
  
  @media (orientation: portrait) {
    #hero-background img {
      height: 100vh !important;
      width: auto !important;
    }
  }
  
  /* Estilos específicos para el mainTitle */
  .hero-main-title {
    font-size: 1.5rem !important;
    line-height: 1.4 !important;
    font-weight: 400 !important;
    letter-spacing: 0.025em !important;
  }
  
  /* Sombreado para mejorar la legibilidad del texto */
  .text-shadow-sm {
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.4), 0 2px 6px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  /* Estilos para la descripción del hero */
  .hero-description {
    font-weight: 500 !important;
    font-size: 1.25rem !important;
    line-height: 1.6 !important;
  }
  
  /* Asegurar que funcione en dispositivos móviles */
  @media (max-width: 768px) {
    #hero-background {
      height: 100vh !important;
      width: 100vw !important;
    }
    
    #hero-background img {
      height: 100vh !important;
      width: 100vw !important;
      object-fit: cover !important;
      object-position: center !important;
    }
    
    /* CSS más específico para móvil */
    #hero-background img.hero-bg-image,
    #hero-background img[data-hero-image="true"] {
      height: 100vh !important;
      width: 100vw !important;
      object-fit: cover !important;
      object-position: center !important;
    }
  }
  
  /* Reglas específicas para móviles pequeños */
  @media (max-width: 640px) {
    #hero-background img {
      height: 100vh !important;
      width: 100vw !important;
      object-fit: cover !important;
      object-position: center !important;
    }
    
    /* CSS más específico para móviles pequeños */
    #hero-background img.hero-bg-image,
    #hero-background img[data-hero-image="true"] {
      height: 100vh !important;
      width: 100vw !important;
      object-fit: cover !important;
      object-position: center !important;
    }
  }
</style>
