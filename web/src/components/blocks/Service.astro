---
import ResponsiveImage from "../ResponsiveImage.astro";
import { portableTextToHtml } from '../../lib/portableText';
import AnimatedBlock from "../AnimatedBlock.astro";

interface ServiceImage {
  asset?: { _ref?: string; url?: string };
  alt?: string;
}

interface NumericRangeOrFixed {
  mode?: 'fixed' | 'range';
  value?: number;
  min?: number;
  max?: number;
  currency?: string;
}

interface ServiceData {
  title?: string;
  duration?: NumericRangeOrFixed;
  price?: NumericRangeOrFixed;
  availability?: {
    online?: boolean;
    presencial?: boolean;
  };
  bulletPoints?: Array<{
    text?: string;
  }>;
  url?: string;
  weight?: number;
  shortDescription?: string;
  longDescription?: any[];
  cardImage?: ServiceImage;
  blockImage?: ServiceImage;
}

interface Props {
  service?: ServiceData;
  variant?: 'card' | 'detailed';
  showPrice?: boolean;
  imagePosition?: 'left' | 'right';
  backgroundColor?: 'primary' | 'secondary' | 'none';
  isWrapped?: boolean;
}

const {
  service = {},
  variant = 'card',
  showPrice = true,
  imagePosition = 'right',
  backgroundColor = 'none',
  isWrapped = false
} = Astro.props as Props;

function formatDuration(d?: NumericRangeOrFixed): string | null {
  if (!d || !d.mode) return null;
  if (d.mode === 'fixed' && typeof d.value === 'number') return `${d.value} min`;
  if (d.mode === 'range' && typeof d.min === 'number' && typeof d.max === 'number') return `${d.min}–${d.max} min`;
  return null;
}

function formatPrice(p?: NumericRangeOrFixed): string | null {
  if (!p || !p.mode) return null;
  const currency = p.currency || '€';
  if (p.mode === 'fixed' && typeof p.value === 'number') return `${p.value} ${currency}`;
  if (p.mode === 'range' && typeof p.min === 'number' && typeof p.max === 'number') return `${p.min}–${p.max} ${currency}`;
  return null;
}

function formatAvailability(a?: { online?: boolean; presencial?: boolean }): string[] {
  if (!a) return [];
  const options = [];
  if (a.online) options.push('Online');
  if (a.presencial) options.push('Presencial');
  return options;
}

function generateServiceId(title?: string): string {
  if (!title) return 'servicio';
  return title
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .trim();
}

function getFrameColor(backgroundColor: string): string {
  if (backgroundColor === 'primary') return 'secondary';
  if (backgroundColor === 'secondary') return 'primary';
  return 'primary'; // default
}

const durationLabel = formatDuration(service?.duration);
const priceLabel = showPrice ? (formatPrice(service?.price) ?? 'Sin precio') : null;
const availabilityOptions = formatAvailability(service?.availability);
const serviceId = generateServiceId(service?.title);
const frameColor = getFrameColor(backgroundColor);
const rotationDirection = imagePosition === 'right' ? 'rotate-3' : '-rotate-3';
const frameRotationDirection = imagePosition === 'right' ? '-rotate-2' : 'rotate-2';
---

{
  variant === 'card' ? (
    <AnimatedBlock animation="scaleIn" delay={0} class="service-block">
      <article class="w-full rounded-lg border border-gray-200 p-4 bg-white shadow-sm hover:shadow-md transition-shadow duration-300">
        {service?.cardImage && (
          <ResponsiveImage image={service.cardImage} alt={service.cardImage?.alt} class="w-full rounded-md mb-4" aspectRatio="4/3" />
        )}
        <h3 class="text-responsive-h4 font-semibold text-brand-forest-500">
          {service?.url ? (
            <a href={service.url} target="_blank" rel="noopener" class="hover:underline">{service?.title}</a>
          ) : service?.title}
        </h3>
        
        <!-- Información de duración, disponibilidad y precio -->
        <div class="mt-3 text-responsive-small text-gray-600 flex flex-wrap gap-4">
          {durationLabel && <span>{durationLabel}</span>}
          {availabilityOptions.length > 0 && (
            <span class="flex items-center gap-1">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              {availabilityOptions.join(' / ')}
            </span>
          )}
          {priceLabel && <span class="font-medium text-green-600 text-lg">{priceLabel}</span>}
        </div>
        
        {service?.shortDescription && (
          <p class="mt-3 text-gray-700 text-responsive-small">{service.shortDescription}</p>
        )}
        
        <!-- Bullet points en 2 columnas -->
        {service?.bulletPoints && service.bulletPoints.length > 0 && (
          <div class="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-3">
            {service.bulletPoints.map((point) => (
              <div class="flex items-start gap-2">
                <svg class="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
                <span class="text-responsive-small text-gray-700">{point.text}</span>
              </div>
            ))}
          </div>
        )}
      </article>
    </AnimatedBlock>
  ) : (
    <AnimatedBlock animation="fadeInUp" delay={0} class="service-block">
      <section 
        id={serviceId}
        class={`py-12 px-4 max-w-6xl mx-auto ${
          !isWrapped ? (
            backgroundColor === 'primary' ? 'bg-primary-50' : 
            backgroundColor === 'secondary' ? 'bg-secondary-50' : 
            'bg-white'
          ) : ''
        }`}
      >
      <div class="flex flex-col gap-8">
        <!-- Título en fila completa -->
        <div class="w-full">
          <h2 class="text-responsive-h2 font-bold text-brand-forest-500 mb-6">
            {service?.title}
          </h2>
        </div>
        
        <!-- Contenido en 2 columnas: imagen y texto descriptivo -->
        <div class={`flex flex-col ${imagePosition === 'right' ? 'lg:flex-row' : 'lg:flex-row-reverse'} gap-8 items-start`}>
          <!-- Imagen -->
          {service?.blockImage && (
            <div class="w-full lg:w-2/5 flex-shrink-0 flex items-center justify-center">
              <div class="relative w-full max-w-sm">
                <!-- Marco de fondo con rotación contraria -->
                <div class={`absolute inset-0 ${frameColor === 'primary' ? 'bg-primary-200' : 'bg-secondary-200'} ${frameRotationDirection} rounded-lg`}></div>
                
                <!-- Imagen con rotación -->
                <div class={`relative ${rotationDirection} transform transition-transform duration-300 hover:scale-105`}>
                  <ResponsiveImage 
                    image={service.blockImage} 
                    alt={service.blockImage?.alt || service?.title || ''} 
                    class="rounded-lg shadow-lg object-cover w-full aspect-square"
                    aspectRatio="1/1"
                  />
                </div>
              </div>
            </div>
          )}
          
          <!-- Contenido de texto descriptivo -->
          <div class="w-full lg:w-3/5">
            <!-- Información de duración, disponibilidad y precio - alineada con la parte superior de la imagen -->
            <div class="mb-6 text-responsive-small text-gray-600 flex flex-wrap gap-4">
              {durationLabel && (
                <span class="flex items-center gap-1">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  {durationLabel}
                </span>
              )}
              {availabilityOptions.length > 0 && (
                <span class="flex items-center gap-1">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  {availabilityOptions.join(' / ')}
                </span>
              )}
              {priceLabel && (
                <span class="font-medium text-green-600 flex items-center gap-1 text-lg">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                  </svg>
                  {priceLabel}
                </span>
              )}
            </div>
            
            <!-- Descripción corta -->
            {service?.shortDescription && (
              <p class="text-responsive-body-large text-gray-700 mb-6">
                {service.shortDescription}
              </p>
            )}
            
            <!-- Descripción extendida -->
            {service?.longDescription && service.longDescription.length > 0 && (
              <div 
                class="text-responsive-body-large text-gray-700 mb-6 prose prose-slate max-w-none"
                set:html={portableTextToHtml(service.longDescription)}
              ></div>
            )}
            
            <!-- Bullet points -->
            {service?.bulletPoints && service.bulletPoints.length > 0 && (
              <div class="mb-8 grid grid-cols-1 sm:grid-cols-2 gap-4">
                {service.bulletPoints.map((point) => (
                  <div class="flex items-start gap-3">
                    <svg class="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    <span class="text-responsive-body text-gray-700">{point.text}</span>
                  </div>
                ))}
              </div>
            )}
            
            <!-- CTAs -->
            <div class="flex flex-col sm:flex-row gap-4">
              <sl-button 
                href={`/contacto?servicio=${encodeURIComponent(service?.title || '')}`}
                variant="primary"
                size="large"
                class="flex-1 min-w-[200px]"
              >
                <svg slot="prefix" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                Consultar sobre este servicio
              </sl-button>
              
              <sl-button 
                href={`/primera-cita?servicio=${encodeURIComponent(service?.title || '')}`}
                variant="outline"
                size="large"
                class="flex-1 min-w-[200px]"
              >
                <svg slot="prefix" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Reservar primera cita
              </sl-button>
            </div>
          </div>
        </div>
      </div>
      </section>
    </AnimatedBlock>
  )
}


