---
import { sanityClient } from '../lib/sanityClient'

interface Props {
  content?: any[]
}

const { content } = Astro.props as Props

// Función para renderizar contenido de bloques de Sanity
function renderBlockContent(blocks: any[]): string {
  if (!blocks || !Array.isArray(blocks)) return ''
  
  return blocks.map(block => {
    switch (block._type) {
      case 'block':
        return renderBlock(block)
      case 'span':
        return renderSpan(block)
      default:
        return ''
    }
  }).join('')
}

function renderBlock(block: any): string {
  const children = block.children ? block.children.map(renderSpan).join('') : ''
  
  switch (block.style) {
    case 'h1':
      return `<h1 class="text-responsive-h1 font-bold mb-6 text-brand-forest-500">${children}</h1>`
    case 'h2':
      return `<h2 class="text-responsive-h2 font-bold mb-5 text-brand-forest-500">${children}</h2>`
    case 'h3':
      return `<h3 class="text-responsive-h3 font-semibold mb-4 text-brand-forest-500">${children}</h3>`
    case 'h4':
      return `<h4 class="text-responsive-h4 font-semibold mb-3 text-brand-forest-500">${children}</h4>`
    case 'h5':
      return `<h5 class="text-responsive-body font-semibold mb-3 text-brand-forest-500">${children}</h5>`
    case 'h6':
      return `<h6 class="text-responsive-small font-semibold mb-2 text-brand-forest-500">${children}</h6>`
    case 'blockquote':
      return `<blockquote class="border-l-4 border-gray-300 pl-4 italic text-responsive-body text-gray-600 my-6">${children}</blockquote>`
    case 'normal':
    default:
      return `<p class="mb-5 text-responsive-body text-gray-700 leading-relaxed">${children}</p>`
  }
}

function renderSpan(span: any): string {
  let text = span.text || ''
  
  if (span.marks) {
    span.marks.forEach((mark: any) => {
      switch (mark) {
        case 'strong':
          text = `<strong class="font-semibold">${text}</strong>`
          break
        case 'em':
          text = `<em class="italic">${text}</em>`
          break
        case 'code':
          text = `<code class="bg-gray-100 px-1 py-0.5 rounded text-responsive-small font-mono">${text}</code>`
          break
        default:
          // Para enlaces y otros marks, necesitaríamos más información
          break
      }
    })
  }
  
  return text
}

const renderedContent = content ? renderBlockContent(content) : ''
---

{renderedContent && (
  <div class="prose prose-lg max-w-none" set:html={renderedContent} />
)}
