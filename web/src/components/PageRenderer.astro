---
import HeroHome from "./blocks/HeroHome.astro";
import Hero from "./blocks/Hero.astro";
import BlogHero from "./blocks/BlogHero.astro";
import TextBlock from "./blocks/TextBlock.astro";
import Service from "./blocks/Service.astro";
import ServiceCarousel from "./blocks/ServiceCarousel.astro";
import Testimonials from "./blocks/Testimonials.astro";
import Logos from "./blocks/Logos.astro";
import ImageWithLayout from "./blocks/ImageWithLayout.astro";
import Columns from "./blocks/Columns.astro";
import BlockImage from "./blocks/BlockImage.astro";
import QuoteBlock from "./blocks/QuoteBlock.astro";
import BlockContentSection from "./blocks/BlockContentSection.astro";
import BlogPosts from "./blocks/BlogPosts.astro";
import ContactCTA from "./blocks/ContactCTA.astro";
import BlockWrapper from "./blocks/BlockWrapper.astro";
import { fetchBlogPostsForBlock } from "../lib/blog";

const { blocks } = Astro.props;

// Debug: verificar qué bloques se están renderizando (comentado para producción)
// console.log('PageRenderer blocks:', blocks?.map((block: any) => ({ type: block._type, title: block.title || block.mainTitle })));
// console.log('SimpleHero blocks in PageRenderer:', blocks?.filter((block: any) => block._type === 'blockSimpleHero'));

// Resolver posts para bloques de blog en SSG
const resolvedBlocks = await Promise.all((blocks ?? []).map(async (b: any) => {
  if (b?._type === 'blockBlogPosts') {
    const posts = await fetchBlogPostsForBlock({
      _type: 'blockBlogPosts',
      title: b?.title,
      limit: b?.limit,
      category: b?.category,
      displayMode: b?.displayMode,
      featuredPosts: b?.featuredPosts
    });
    return { ...b, __posts: posts };
  }
  return b;
}));

if (import.meta.env.DEV) {
  try {
    const h1Count = Array.isArray(blocks)
      ? blocks.filter((b: any) => b?._type === 'blockContentSection' && b?.headingLevel === 'h1').length
      : 0;
    if (h1Count > 1) {
      console.warn(`[PageRenderer] Hay ${h1Count} encabezados h1 en esta página. Considera reducir a uno por accesibilidad/SEO.`);
    }
  } catch (_err) {}
}
---

{(resolvedBlocks ?? blocks)?.map((block: any) => {
  const commonProps = {
    backgroundColor: block.backgroundColor ?? 'none',
    backgroundLayout: block.backgroundLayout ?? 'grid',
    contentLayout: block.contentLayout ?? 'grid',
  };
  
  switch (block._type) {
    case "blockHero":
      return <HeroHome {...block} />;
    case "blockSimpleHero":
      return <Hero {...block} />;
    case "blockBlogHero":
      return <BlogHero {...block} />;
    case "blockText":
      return <BlockWrapper {...commonProps}><TextBlock {...block} /></BlockWrapper>;
    case "serviceBlock":
      // Alternar posición de imagen basada en el índice del bloque
      const serviceIndex = resolvedBlocks.findIndex((b: any) => b === block);
      const imagePosition = serviceIndex % 2 === 0 ? 'right' : 'left';
      // Mapear backgroundColor para el Service
      const serviceBackgroundColor = block.backgroundColor === 'color1' ? 'primary' : 
                                   block.backgroundColor === 'color2' ? 'secondary' : 'none';
      return <BlockWrapper {...commonProps}><Service service={block.service} variant={block.variant} showPrice={block.showPrice} imagePosition={imagePosition} backgroundColor={serviceBackgroundColor} isWrapped={true} /></BlockWrapper>;
    case "serviceCarousel":
      return <BlockWrapper {...commonProps}><ServiceCarousel subtitle={block.subtitle} title={block.title} lead={block.lead} items={block.items} autoplay={block.autoplay} intervalMs={block.intervalMs} showPrice={block.showPrice} /></BlockWrapper>;
    case "blockTestimonials":
      return <BlockWrapper {...commonProps}><Testimonials items={block.items} /></BlockWrapper>;
    case "blockLogos":
      return <BlockWrapper {...commonProps}><Logos title={block.title} logos={block.logos} /></BlockWrapper>;
    case "imageWithLayout":
      return <BlockWrapper {...commonProps}><ImageWithLayout {...block} /></BlockWrapper>;
    case "columns":
      return <BlockWrapper {...commonProps}><Columns {...block} /></BlockWrapper>;
    case "blockImage":
      return <BlockWrapper {...commonProps}><BlockImage {...block} /></BlockWrapper>;
    case "quoteBlock":
      return <BlockWrapper {...commonProps}><QuoteBlock {...block} /></BlockWrapper>;
    case "blockContentSection":
      return <BlockWrapper {...commonProps}><BlockContentSection {...block} /></BlockWrapper>;
    case "blockBlogPosts":
      return <BlockWrapper {...commonProps}><BlogPosts title={block.title} posts={block.__posts || []} displayMode={block.displayMode} /></BlockWrapper>;
    case "blockContact":
      return <BlockWrapper {...commonProps}><ContactCTA block={block} /></BlockWrapper>;
    default:
      return null;
  }
})}
