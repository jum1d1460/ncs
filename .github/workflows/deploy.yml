name: Deploy

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [sanity-content-changed]

jobs:
  deploy:
    name: Build and deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    env:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_PAGES_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PAGES_PROJECT_NAME }}
      CLOUDFLARE_PAGES_DEPLOY_HOOK_URL: ${{ secrets.CLOUDFLARE_PAGES_DEPLOY_HOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: web
        run: npm ci --no-audit --no-fund

      - name: Run tests
        working-directory: web
        run: npm run test

      - name: Build
        working-directory: web
        env:
          NODE_ENV: production
          # Propaga variables necesarias para el cliente de Sanity en build
          PUBLIC_SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          PUBLIC_SANITY_DATASET: ${{ secrets.SANITY_DATASET }}
          PUBLIC_SANITY_API_VERSION: ${{ secrets.SANITY_API_VERSION }}
        run: npm run build

      - name: Publish to Cloudflare Pages
        if: ${{ env.CLOUDFLARE_API_TOKEN != '' && env.CLOUDFLARE_ACCOUNT_ID != '' && env.CLOUDFLARE_PAGES_PROJECT_NAME != '' }}
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PAGES_PROJECT_NAME }}
          directory: web/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Cloudflare Pages Deploy Hook
        if: ${{ (env.CLOUDFLARE_API_TOKEN == '' || env.CLOUDFLARE_ACCOUNT_ID == '' || env.CLOUDFLARE_PAGES_PROJECT_NAME == '') && env.CLOUDFLARE_PAGES_DEPLOY_HOOK_URL != '' }}
        run: |
          curl -X POST --fail --silent --show-error "$CLOUDFLARE_PAGES_DEPLOY_HOOK_URL"
        env:
          CLOUDFLARE_PAGES_DEPLOY_HOOK_URL: ${{ secrets.CLOUDFLARE_PAGES_DEPLOY_HOOK_URL }}


